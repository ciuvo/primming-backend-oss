# -*- coding: utf-8 -*-
# vim: set formatoptions+=l tw=99:
#
# Copyright 2019 Ciuvo GmbH. All rights reserved. This file is subject to the terms and conditions
# defined in file 'LICENSE', which is part of this source code package.
"""
Django settings for primming project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

import pytz
import yaml
from yaml.loader import Loader as YamlLoader

VERSION = "1.0"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
ENVIRONMENT = os.environ.get("PRIMMING_ENV", "dev")
BASE_DIR = Path(__file__).resolve().parent.parent.parent
CONFIG_DIR = Path.joinpath(Path("conf"), Path(ENVIRONMENT))

IP_DATABASE = os.path.join(BASE_DIR, "conf/GeoIPCity.mmdb")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# FIXME
SECRET_KEY = "z98eiqxbzjpx105ylzq&cif__i$kdqni!amy_tp)@4m*j^-#_n"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [
    "plugin.dynamic-pricing.at",
    "primming.picky.io",
    "10.0.0.0/8",
]

CSRF_TRUSTED_ORIGINS = [
    "https://plugin.dynamic-pricing.at",
    "https://primming.picky.io",
]

# Application definition

INSTALLED_APPS = [
    # default apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # external apps
    "crispy_forms",
    # custom apps
    "primming.core",
    "primming.registration",
    "primming.pricewatcher",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "primming.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path.joinpath(BASE_DIR, Path("src"), Path("primming"), Path("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "primming.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "OPTIONS": {
            "read_default_file": "/run/secrets/django-db-conf",
        },
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://cache:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "IGNORE_EXCEPTIONS": True,
        },
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

CACHE_CONTROL_SCRAPER_TIMEOUT = 24 * 60 * 60  # 1 day

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "de-de"

TIME_ZONE = "Europe/Vienna"

USE_I18N = True

USE_L10N = True

USE_TZ = True

PYTZ_ZONE = pytz.timezone("Europe/Vienna")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = Path.joinpath(BASE_DIR, Path("static"))

STATICFILES_DIRS = [BASE_DIR.joinpath(Path("src"), Path("primming"), Path("static"))]

# Fixtures

FIXTURE_DIRS = [CONFIG_DIR.parent.joinpath(Path("fixtures"))]

# Crispy forms
CRISPY_TEMPLATE_PACK = "bootstrap4"

# CELERY
CELERY_BROKER_URL = "redis://cache:6379/2"
CELERY_TASK_IGNORE_RESULT = True
CELERY_TIMEZONE = TIME_ZONE


BASICAUTH_USERS = {"ait": "boOk7laD7keLlgEe"}

# -------------------------------------------- Deployment -----------------------------------------
# only used for building relases, these settings are overridden by conf/localsettings.yaml
DOCKER_REGISTRY = ""

# ------------------------------------- LOCAL SETTINGS OVERRIDES ----------------------------------

# The conf/localsettings.yaml is excluded by the .dockerignore file, but in dev mode
# (docker-compose.override.yaml) we bind-mound the src and conf directory which means that the
# local override file is available in the container. We don't want that, that's the reason for
# the PRIMMING_DOCKERDEV variable to ignore this file.
for ls_path in (
    (CONFIG_DIR,)
    if os.environ.get("PRIMMING_DOCKERDEV", False)  # ignore conf/localsettings.yaml
    else (CONFIG_DIR, CONFIG_DIR.parent)
):
    try:
        with open(Path.joinpath(ls_path, Path("localsettings.yaml")), "r") as local_settings:
            ls = yaml.load(local_settings, Loader=YamlLoader)
            if not ls:
                continue
            for key, value in ls.items():
                globals()[key] = value
    except IOError:
        # Skip missing localsettings.yaml file.
        pass

# ----------------------------------------- LOGGING SETTINGS --------------------------------------
LOG_LEVEL = "DEBUG" if DEBUG else "INFO"
LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s: %(levelname)s/%(module)s:%(process)d] %(message)s",
        },
        "simple": {
            "format": "[%(levelname)s] %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "stream": "ext://sys.stdout",
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "filters": ["require_debug_true"],
            "include_html": True,
        },
    },
    "loggers": {
        "primming": {
            "handlers": ["console", "mail_admins"],
            "level": LOG_LEVEL,
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "sentry_sdk": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "django.request": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
        "celery": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": False,
        },
    },
}
